#! /bin/bash

set -u

ME=$(basename -- "$0")

say()
{
  echo "$ME: $@"
}


fatal()
{ 
  echo "$ME: Fatal: $@" >&2
  exit 1
}

make_link()
{
  local dir=$1
  local link="$dir/$target"

  if test -e "$link"; then
    say "Ignoring <$link> sice it already exists"
    return 1
  elif test -L "$link"; then
    # It's a symlink, but -e failed, so it's a dangling sylink
    if $opt_fix_links; then
      say "Fixing broken symlink <$link>"
      $do rm -f -- "$link"
    else
      say "Ignoring broken symlink <$link> since 'fix' is not in effect"
      return 1
    fi
  else
    say "Creating symlink <$link>"
  fi
  
  # Split on slash
  tdir=(${dir//\// })
  
  # Replace each component by ".."
  udir=${tdir[@]//*/..}

  $do ln -s -- "${udir[@]// /\/}/$target" "$link"
}

rm_link()
{
  local link="$1/$target"
  
  if test -L "$link"; then
    # Target is a symlink. Check that it points to the right place
    to=$(readlink -e -- "$link")
    if test "$to" = "$top_file"; then
      say "Removing <$link>"
      $do rm -f -- "$link"
    else
      say "Ignoring <$link> since it does not point to the target file"
    fi
  else
    say "Ignoring <$link> since it is not a symlink"
  fi
}

usage="
Usage: $ME {-c|-r} [OPTION(s)...] [DIR=.]

Options:
    -c, --create          Create symlinks
    -r, --remove          Remove symlinks
    -n, --dry-run         Show commands without executing them
    -f, --filename=FILE   Override the name of the target symlink
    -F, --fix             Fix danlging symlinks (for 'create').
        --follow          Follow symlinks when looking for local.mk files
    -h, --help            Show this help

A symlink is only only created if it doesn't already exist. The only exception is
if it's dangling and 'fix' is used.

Symlinks are only removed if they are actually symlinks and point to the top
level target file.
"

do=
opt_fix_links=false
opt_force=false
opt_follow=
opt_what=make_link
OPTIONS=$(getopt -o Fcrhnf: -l dry-run,create,remove,help,fix,follow,filename -- "$@")
eval set -- "$OPTIONS"

while :
do
  case $1 in
  -n | --dry-run)
    do=echo
    ;;
  -f | --filename)
    shift
    target=$1
    ;;
  -c | --create)
    opt_what=make_link
    ;;
  -r | --remove)
    opt_what=rm_link
    ;;
  -F | --fix)
    opt_fix_links=true
    ;;
  --follow)
    opt_follow=-follow
    ;;
  -h | --help)
    echo "$usage"
    exit 0
    ;;
  --)
    shift
    break
    ;;
  *)
    ;;
  esac
  shift
done

if test -z "${1:-}"; then
  echo "$usage"
  exit 0
fi

DIR=${1:-.}

test -f "$DIR/MBRoot" || 
  fatal "MBRoot file does not exist in $DIR"

cd "$DIR" || exit 1

# Check if we're on a 'premake' tree
if test -f GNUmakefile; then
  target=${target:-GNUmakefile}
elif test -f Makefile; then
  target=${target:-Makefile}
else
  fatal "No Makefile or GNUmakefile in $DIR"
fi

top_file=$(readlink -e -- "$target")

# Locate the directories with 'local.mk' files
local_mk=($(find . -name local.mk $opt_follow))

for dir in ${local_mk[@]%/*}
do
  $opt_what "${dir#./}"
done
